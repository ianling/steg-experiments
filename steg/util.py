from collections.abc import Generator


HEADER_LENGTH_BYTES = 13


def generate_default_palette() -> list[tuple[int, int, int]]:
    """generate a list of available colors as tuples in the form: (r, g, b)"""
    # limit RGB values to 16-240 instead of 0-255 to help preserve color
    # possible_values = [val for val in range(16, 240, 37)]
    # num_possible_values = len(possible_values)
    #
    # colors = []
    # for r in range(num_possible_values):
    #     for g in range(num_possible_values):
    #         for b in possible_values:
    #             colors.append((possible_values[r], possible_values[g], b))
    #
    # # truncate palette down to 255 entries
    # colors = colors[0:255]
    # # entry 256 is "pure white" (within the 16-240 range)
    # colors.append((240, 240, 240))
    #
    # return colors
    return [
        (16, 16, 16),
        (14, 14, 51),
        (16, 15, 88),
        (16, 16, 125),
        (14, 14, 163),
        (16, 15, 200),
        (14, 15, 235),
        (14, 52, 14),
        (15, 52, 51),
        (15, 52, 90),
        (14, 52, 126),
        (15, 51, 162),
        (15, 52, 200),
        (14, 51, 237),
        (15, 88, 14),
        (16, 89, 53),
        (14, 88, 89),
        (16, 89, 126),
        (15, 89, 162),
        (16, 88, 199),
        (16, 89, 238),
        (15, 126, 14),
        (14, 126, 52),
        (15, 126, 89),
        (15, 126, 126),
        (15, 125, 163),
        (15, 125, 200),
        (14, 125, 236),
        (14, 162, 15),
        (16, 163, 52),
        (15, 163, 88),
        (14, 163, 127),
        (15, 162, 163),
        (14, 163, 199),
        (16, 162, 236),
        (15, 200, 15),
        (15, 200, 52),
        (13, 200, 89),
        (15, 199, 126),
        (13, 199, 162),
        (15, 199, 199),
        (15, 200, 238),
        (15, 237, 14),
        (15, 236, 53),
        (15, 236, 89),
        (15, 238, 126),
        (14, 238, 163),
        (15, 237, 201),
        (14, 237, 237),
        (51, 14, 13),
        (51, 15, 53),
        (51, 14, 88),
        (51, 15, 125),
        (53, 15, 165),
        (51, 14, 198),
        (52, 15, 237),
        (52, 51, 15),
        (53, 53, 53),
        (52, 52, 89),
        (53, 52, 125),
        (52, 52, 161),
        (51, 51, 200),
        (53, 52, 237),
        (53, 89, 16),
        (51, 89, 51),
        (53, 90, 89),
        (51, 88, 126),
        (51, 89, 163),
        (52, 88, 199),
        (51, 88, 236),
        (51, 125, 14),
        (52, 125, 51),
        (52, 125, 89),
        (51, 125, 126),
        (53, 126, 163),
        (51, 125, 198),
        (53, 125, 236),
        (53, 163, 15),
        (51, 162, 50),
        (51, 163, 89),
        (52, 163, 126),
        (51, 162, 162),
        (53, 163, 201),
        (52, 162, 237),
        (53, 201, 16),
        (51, 199, 52),
        (53, 200, 89),
        (51, 199, 124),
        (51, 200, 164),
        (53, 200, 201),
        (51, 200, 236),
        (51, 237, 15),
        (52, 237, 52),
        (51, 236, 88),
        (51, 238, 127),
        (52, 236, 163),
        (51, 237, 200),
        (52, 236, 236),
        (89, 15, 15),
        (88, 14, 51),
        (89, 15, 88),
        (89, 16, 127),
        (89, 14, 162),
        (89, 15, 200),
        (89, 14, 235),
        (89, 51, 14),
        (89, 52, 51),
        (88, 52, 90),
        (89, 52, 126),
        (88, 52, 162),
        (90, 52, 202),
        (89, 52, 236),
        (88, 88, 14),
        (90, 89, 53),
        (89, 89, 89),
        (89, 89, 126),
        (90, 89, 162),
        (89, 89, 198),
        (89, 89, 238),
        (88, 126, 16),
        (89, 125, 52),
        (88, 126, 88),
        (90, 127, 126),
        (88, 125, 163),
        (88, 126, 200),
        (89, 125, 236),
        (88, 162, 15),
        (89, 163, 52),
        (89, 162, 88),
        (89, 162, 126),
        (89, 163, 164),
        (89, 162, 199),
        (89, 163, 236),
        (88, 200, 14),
        (90, 200, 52),
        (88, 199, 87),
        (88, 200, 126),
        (90, 201, 164),
        (88, 199, 199),
        (90, 200, 238),
        (89, 236, 16),
        (89, 237, 52),
        (88, 236, 89),
        (90, 237, 126),
        (89, 237, 162),
        (88, 237, 201),
        (89, 236, 237),
        (124, 14, 13),
        (126, 15, 53),
        (125, 15, 89),
        (126, 14, 125),
        (126, 16, 162),
        (126, 13, 200),
        (126, 15, 237),
        (126, 52, 16),
        (126, 52, 52),
        (126, 52, 89),
        (126, 52, 125),
        (125, 52, 163),
        (126, 51, 199),
        (126, 52, 237),
        (126, 89, 16),
        (126, 88, 51),
        (126, 89, 88),
        (124, 88, 126),
        (126, 89, 163),
        (126, 90, 200),
        (126, 88, 238),
        (126, 126, 15),
        (125, 125, 51),
        (126, 125, 89),
        (126, 126, 126),
        (126, 126, 163),
        (127, 126, 199),
        (126, 126, 235),
        (126, 163, 14),
        (124, 162, 52),
        (126, 162, 89),
        (126, 164, 126),
        (126, 163, 162),
        (126, 163, 201),
        (125, 163, 237),
        (127, 200, 16),
        (125, 199, 52),
        (126, 200, 89),
        (126, 199, 125),
        (126, 199, 163),
        (126, 200, 201),
        (126, 199, 236),
        (126, 236, 15),
        (125, 237, 51),
        (126, 236, 88),
        (126, 237, 125),
        (125, 237, 163),
        (126, 237, 200),
        (125, 236, 236),
        (163, 15, 15),
        (162, 15, 51),
        (162, 15, 90),
        (163, 15, 127),
        (162, 15, 162),
        (163, 14, 200),
        (163, 15, 236),
        (162, 51, 14),
        (162, 52, 51),
        (163, 52, 90),
        (162, 52, 126),
        (163, 51, 162),
        (163, 53, 199),
        (164, 51, 238),
        (163, 89, 14),
        (163, 89, 53),
        (162, 88, 88),
        (163, 89, 126),
        (164, 90, 163),
        (162, 89, 200),
        (164, 89, 237),
        (163, 126, 16),
        (162, 125, 52),
        (163, 125, 88),
        (163, 126, 125),
        (162, 126, 164),
        (163, 126, 200),
        (162, 126, 236),
        (163, 162, 14),
        (163, 163, 52),
        (163, 163, 89),
        (163, 162, 126),
        (164, 164, 164),
        (162, 162, 199),
        (164, 163, 236),
        (163, 199, 14),
        (163, 200, 51),
        (161, 199, 89),
        (163, 199, 126),
        (163, 201, 163),
        (163, 200, 199),
        (163, 200, 238),
        (162, 237, 14),
        (163, 236, 52),
        (163, 237, 90),
        (163, 237, 126),
        (163, 236, 162),
        (163, 236, 200),
        (162, 236, 237),
        (200, 15, 14),
        (199, 15, 52),
        (200, 15, 89),
        (199, 14, 125),
        (201, 15, 164),
        (199, 13, 199),
        (199, 15, 237),
        (199, 52, 16),
        (200, 52, 52),
        (199, 52, 88),
        (239, 239, 239)
    ]


def factors(x) -> Generator[int, None, None]:
    for i in range(2, x//2+1):
        if x % i == 0:
            yield i


def fuzzy_equals(color_a: tuple[int, int, int], color_b: tuple[int, int, int], fuzziness: int = 17) -> bool:
    return abs(color_a[0] - color_b[0]) <= fuzziness and abs(color_a[1] - color_b[1]) <= fuzziness and abs(color_a[2] - color_b[2]) <= fuzziness


def list_fuzzy_search(haystack: list[tuple[int, int, int]], needle: tuple[int, int, int], fuzziness=17) -> int:
    # check for nulls
    if all([value - fuzziness <= 0 for value in needle]):
        return 0

    for ii, element in enumerate(haystack):
        if fuzzy_equals(element, needle, fuzziness=fuzziness):
            return ii

    raise Exception(f"image was too messed up, couldn't find value for color {needle}")
